% Generated by MATLAB(R) 24.1 (R2024a) and 5G Toolbox 24.1 (R2024a).
% Generated on: 01-Sep-2024 13:53:22
clear;

config = struct();
config.NCellID = 102;

% Configure an SS burst
config.BlockPattern = 'Case B';         % FR1: 'Case A','Case B','Case C'. FR2: 'Case D','Case E'
config.TransmittedBlocks = ones(1,8);   % Bitmap of SS blocks transmitted
config.SubcarrierSpacingCommon = 15;    % SIB1 subcarrier spacing in kHz (15 or 30 for FR1. 60 or 120 for FR2)
config.EnableSIB1 = 1;                  % Set to 0 to disable SIB1

% Set the minimum channel bandwidth for the NR band required to
% configure CORESET 0 in FR1 (See TS 38.101-1 Table 5.3.5-1)
config.MinChannelBW = 10; % 5, 10, 40 MHz

% Introduce a beamforming gain by boosting the power (and therefore
% SNR) of one SSB and associated SIB1 PDCCH and PDSCH    
boost = 6; % SNR boost in dB
config.Power = zeros(size(config.TransmittedBlocks));
config.Power(1) = boost; % boost the first SSB

% Configure and generate a waveform containing an SS burst and SIB1
wavegenConfig = hSIB1WaveformConfiguration(config);
% wavegenConfig.CSIRS{1, 1}.Enable = 1;
% wavegenConfig.CSIRS{1, 1}.SymbolLocations = 6;
[wf,info_wf] = nrWaveformGenerator(wavegenConfig);

% Specify the sample rate of the waveform in Hz
Fs = info_wf.ResourceGrids(1).Info.SampleRate;

%% Visualize
% Spectrum Analyzer
% spectrum = spectrumAnalyzer('SampleRate', Fs);
% spectrum(waveform);
% release(spectrum);

%% CSI-RS
carrier = nrCarrierConfig;
carrier.NSizeGrid = 26;
carrier.SubcarrierSpacing = 15;
carrier.NSlot = 1;
carrier.NFrame = 0;

csirs = nrCSIRSConfig;
csirs.CSIRSType = {'nzp'};
csirs.CSIRSPeriod = {[5 1]};
csirs.Density = {'one'};
csirs.RowNumber = 2;
csirs.SymbolLocations = {1};
csirs.SubcarrierLocations = {6};
csirs.NumRB = 26;

powerCSIRS = 0;
sym = nrCSIRS(carrier,csirs);
csirsSym = sym*db2mag(powerCSIRS);
csirsInd = nrCSIRSIndices(carrier,csirs);
ports = max(csirs.NumCSIRSPorts);   % Number of antenna ports
txGrid = nrResourceGrid(carrier,ports);
txGrid(csirsInd) = csirsSym;
[txWaveform,~] = nrOFDMModulate(carrier,txGrid);
wf = [wf; txWaveform];

%% Beamforming
c = physconst("LightSpeed");
e = 10^(-220/10);
gNBAntDir = [0 0].';
RASAntSize = [1 1];
RASAntDir = [0 0].';
UEAntSize = [1 1];
UEAntDir = [0 0].';
SCS = 15;
NRB = 52;
nSlots = 0;
nLayers = 1;
scOffset = 0;
noRBs = 1;

gNBAntSize = [1 2];
M = prod(gNBAntSize);
fc = 5450e6;
reflectionsOrder = 10;
K = 1;

% viewer = siteviewer("Basemap","openstreetmap","Buildings","RIT_kimballLoop.osm");
gNBPos = [43.083695, -77.680426];
UEPos = [43.083376, -77.680509];
RASPos = [43.083378, -77.680697];

gNBSite = txsite("Name","GCI_gNB","Latitude",gNBPos(1),"Longitude",gNBPos(2),"AntennaAngle",gNBAntDir(1:2),"AntennaHeight",10,"TransmitterFrequency",fc);
RASSite = rxsite("Name","GCI_RAS","Latitude",RASPos(1),"Longitude",RASPos(2),"AntennaAngle",RASAntDir(1:2),"AntennaHeight",1);
UESite = rxsite("Name","GCI_UE","Latitude",UEPos(1),"Longitude",UEPos(2),"AntennaAngle",UEAntDir(1:2),"AntennaHeight",1);

% gNBSite.show();
% UESite.show();
% RASSite.show();

%% Plot rays
pm = propagationModel("raytracing","Method","sbr","MaxNumReflections",1);
UE_rays = raytrace(gNBSite,UESite,pm,"Type","pathloss");
RAS_rays = raytrace(gNBSite,RASSite,pm,"Type","pathloss");

% plot(UE_rays{1});
% plot(RAS_rays{1});

%% Nullify RAS
ofdmInfo = nrOFDMInfo(NRB,SCS);
RAS_channel = getChannelObj(RAS_rays,fc,ofdmInfo.SampleRate);

lambda = c/fc;
RASArray = phased.NRRectangularPanelArray('Size',[RASAntSize(1:2) 1 1],'Spacing', [0.5*lambda*[1 1] 1 1]);
RASArray.ElementSet = {phased.IsotropicAntennaElement};   % isotropic antenna element
RAS_channel.ReceiveAntennaArray = RASArray;
RAS_channel.ReceiveArrayOrientation = [RASAntDir(1); (-1)*RASAntDir(2); 0]; 

gNBArray = phased.NRRectangularPanelArray('Size',[gNBAntSize(1:2) 1 1],'Spacing', [0.1*[1 1] 1 1]);
gNBArray.ElementSet = {phased.IsotropicAntennaElement};
RAS_channel.TransmitAntennaArray = gNBArray;
RAS_channel.TransmitArrayOrientation = [gNBAntDir(1); (-1)*gNBAntDir(2); 0];

RAS_channelInfo = info(RAS_channel);
T = RAS_channel.SampleRate * 1e-3;
[RAS_rxWaveform,RAS_pathGains,RAS_sampleTimes] = RAS_channel([wf(:,1) wf(:,1)]);

% Get gNB-RAS channel coefficients over all RBs and OFDM symbols
RAS_pathFilters = getPathFilters(RAS_channel);
[RAS_offset,~] = nrPerfectTimingEstimate(RAS_pathGains, RAS_pathFilters);
hest_gR = nrPerfectChannelEstimate(RAS_pathGains, RAS_pathFilters, NRB, SCS, nSlots, RAS_offset, RAS_sampleTimes);
hest_gR_temp = getChannelCoeffs(hest_gR, scOffset, noRBs);
% hest_gR_temp = hest_gR_temp./norm(hest_gR_temp);

UE_channel = getChannelObj(UE_rays,fc,ofdmInfo.SampleRate);
UEArray = phased.NRRectangularPanelArray('Size',[UEAntSize(1:2) 1 1],'Spacing',[0.5*lambda*[1 1] 1 1]);
UEArray.ElementSet = {phased.IsotropicAntennaElement};   % isotropic antenna element
UE_channel.ReceiveAntennaArray = UEArray;
UE_channel.ReceiveArrayOrientation = [UEAntDir(1); (-1)*UEAntDir(2); 0];
UE_channel.TransmitAntennaArray = gNBArray;
UE_channel.TransmitArrayOrientation = [gNBAntDir(1); (-1)*gNBAntDir(2); 0];
UE_channelInfo = info(UE_channel);
UE_Nt = UE_channelInfo.NumTransmitAntennas;
UE_Nr = UE_channelInfo.NumReceiveAntennas;
[UE_rxWaveform,UE_pathGains,UE_sampleTimes] = UE_channel([wf(:,1) wf(:,1)]);
UE_pathFilters = getPathFilters(UE_channel);
[UE_offset,~] = nrPerfectTimingEstimate(UE_pathGains, UE_pathFilters);
hest_gU = nrPerfectChannelEstimate(UE_pathGains, UE_pathFilters, NRB, SCS, nSlots, UE_offset, UE_sampleTimes);
hest_gU = getChannelCoeffs(hest_gU, scOffset, noRBs);
noise_UE = wgn(size(UE_rxWaveform,1),size(UE_rxWaveform,2),-59);

[~,~,V] = svd(hest_gU);
w_gNB = V(:,1:nLayers).';
P = null(hest_gR_temp);
w_heu = P*P'*w_gNB.';

h_k = hest_gU.';
H = zeros(M,M,K);
for i = 1:K
	H(:,:,i) = h_k(:,i)*h_k(:,i)';
end
hgR = hest_gR_temp.';
HgR = hgR*hgR';
cvx_begin
	variable tau nonnegative
	variable X(M,M) hermitian
	variable s(K,1)
	minimize(-tau)
	subject to
		norm(diag(X*HgR)) <= e
		for i = 1:K
			trace(X*H(:,:,i)) - s(i) == tau
			s(i) >= 0
		end
		trace(X) <= 1
		X == hermitian_semidefinite(M)
cvx_end

L = 10000;
x = zeros(M,L);
for i = 1:L
	x(:,i) = randn(M,1,'like',1i);
	[U,D,~] = eig(X);
	x(:,i) = U*sqrt(D)*x(:,i);
	x(:,i) = x(:,i)./norm(x(:,i));
	scale = e./(norm(x(:,i)'*hgR).^2);
	x(:,i) = x(:,i).*(scale.^(0.5));
end
[~,idx] = max(min(abs(x'*h_k),[],2));
w_opt = x(:,idx).';

wf_gNB = wf(:,1)*w_gNB;
wf_heu = wf(:,1)*w_heu.';
wf_opt = wf(:,1)*(w_opt./(scale.^0.25));

% Expected values
IP_def = 10*log10(norm(hest_gR_temp*w_gNB').^2)
IP_heu = 10*log10(norm(hest_gR_temp*w_heu).^2)
IP_opt = 10*log10(norm(hest_gR_temp*w_opt').^2)

SNR_def = snr((wf_gNB)*hest_gU.',noise_UE)
SNR_heu = snr((wf_heu)*hest_gU.',noise_UE)
SNR_opt = snr((wf_opt)*hest_gU.',noise_UE)

%% Transmit waveform over the air
bbtx = basebandTransmitter("Sid_USRP_X310");
bbtx.CenterFrequency = 5450000000;
bbtx.RadioGain = 30;
bbtx.SampleRate = Fs;
bbtx.Antennas = ["RFA:TX/RX","RFB:TX/RX"];

% Transmit (for 10 sec):
transmit(bbtx, wf_opt, "continuous");
clc;
fprintf("Transmitting...\n");

% Stop transmission:
pause(300);
stopTransmission(bbtx);
fprintf("Transmission stopped.\n")
delete(bbtx);

%% Transmit using B210
% masterClockRate = 15.36e6;
% interpolationFactor = 1;
% usrpTx = comm.SDRuTransmitter(Platform='B210');
% usrpTx.SerialNum ='31C043B';
% usrpTx.CenterFrequency = 5450000000;
% usrpTx.Gain = 76;
% usrpTx.ChannelMapping = 1;
% usrpTx.LocalOscillatorOffset = 1;
% usrpTx.PPSSource = 'Internal';
% usrpTx.ClockSource = 'Internal';
% usrpTx.MasterClockRate = masterClockRate;
% usrpTx.InterpolationFactor = interpolationFactor;
% usrpTx.TransportDataType = 'int16';
% usrpTx.EnableBurstMode = false;
% 
% % waveform = repmat(waveform, 1, 1);
% waveform = wf_heu;
% 
% % Transmit waveform (for 10 sec):
% stopTime = 10; % sec
% t = 0; % sec
% while t<stopTime
% 	usrpTx(waveform);
% 	t = t + length(waveform)/Fs;
% end
% 
% fprintf('Transmission stopped.\n');
% release(usrpTx);